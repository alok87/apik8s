/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/alok87/apik8s/pkg/apis/group/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MykindLister helps list Mykinds.
type MykindLister interface {
	// List lists all Mykinds in the indexer.
	List(selector labels.Selector) (ret []*v1.Mykind, err error)
	// Mykinds returns an object that can list and get Mykinds.
	Mykinds(namespace string) MykindNamespaceLister
	MykindListerExpansion
}

// mykindLister implements the MykindLister interface.
type mykindLister struct {
	indexer cache.Indexer
}

// NewMykindLister returns a new MykindLister.
func NewMykindLister(indexer cache.Indexer) MykindLister {
	return &mykindLister{indexer: indexer}
}

// List lists all Mykinds in the indexer.
func (s *mykindLister) List(selector labels.Selector) (ret []*v1.Mykind, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mykind))
	})
	return ret, err
}

// Mykinds returns an object that can list and get Mykinds.
func (s *mykindLister) Mykinds(namespace string) MykindNamespaceLister {
	return mykindNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MykindNamespaceLister helps list and get Mykinds.
type MykindNamespaceLister interface {
	// List lists all Mykinds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Mykind, err error)
	// Get retrieves the Mykind from the indexer for a given namespace and name.
	Get(name string) (*v1.Mykind, error)
	MykindNamespaceListerExpansion
}

// mykindNamespaceLister implements the MykindNamespaceLister
// interface.
type mykindNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Mykinds in the indexer for a given namespace.
func (s mykindNamespaceLister) List(selector labels.Selector) (ret []*v1.Mykind, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mykind))
	})
	return ret, err
}

// Get retrieves the Mykind from the indexer for a given namespace and name.
func (s mykindNamespaceLister) Get(name string) (*v1.Mykind, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mykind"), name)
	}
	return obj.(*v1.Mykind), nil
}
